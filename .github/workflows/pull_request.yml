# --- START OF FILE .github/workflows/pull_request.yml (FINAL v2.3 - Shell Quoting Fixed) ---
name: PR CI (CPU-only, fast, deterministic)

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: pr-ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    name: üßπ Lint / Format (changed files only)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format-14
      - name: Check formatting (diff-only)
        run: |
          BASE_REF="${{ github.base_ref || 'main' }}"
          git fetch origin "${BASE_REF}" --depth=1 || true
          CHANGED=$(git diff --name-only "origin/${BASE_REF}..." | grep -E '\.(c|cc|cpp|cxx|cu|cuh|h|hh|hpp)$' || true)
          if [ -z "$CHANGED" ]; then
            echo "No C/C++/CUDA files changed."
            exit 0
          fi
          echo "$CHANGED" | xargs -n 1 clang-format-14 -style=file --dry-run --Werror

  build-cpu:
    name: üõ†Ô∏è Build (CPU-only, manylinux_2_28)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker
        run: docker version
      - name: Build CPU container
        run: docker build -f Dockerfile.cpu -t helios-embed-cpu-builder .
      
      # --- THIS IS THE CORRECTED VERIFICATION STEP ---
      - name: Verify CPU-only Environment before Build
        run: |
          docker run --rm -v "$(pwd)":/io helios-embed-cpu-builder \
            python - <<'PY'
          import os, shutil, torch
          print("--- Verifying Environment ---")
          print("torch.__version__         =", torch.__version__)
          print("torch.version.cuda        =", getattr(torch.version, "cuda", None))
          print("torch.cuda.is_available() =", torch.cuda.is_available())
          print("which nvcc                =", shutil.which("nvcc"))
          PY
      # --- END OF CORRECTION ---

      - name: Build project inside container
        run: |
          # The pip install -e . in the Dockerfile already handles the build.
          # This step just verifies the final image works.
          docker run --rm -v "$(pwd)":/io helios-embed-cpu-builder \
            bash -lc "python -c 'import helios_embed; print(\"Module import successful inside container.\")'"

  test-cpu:
    name: ‚úÖ Tests (short, CPU-only)
    runs-on: ubuntu-latest
    needs: build-cpu
    steps:
      - uses: actions/checkout@v4
      - name: Build CPU container (can be cached from previous step)
        run: docker build -f Dockerfile.cpu -t helios-embed-cpu-builder .
      - name: Run short tests (GPU-free)
        run: |
          docker run --rm -v "$(pwd)":/io helios-embed-cpu-builder \
            bash -lc "python run_tests.py"

  static-analysis:
    name: üî¨ Static Analysis (advisory)
    runs-on: ubuntu-latest
    needs: test-cpu
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Install clang-tidy
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy-14
      - name: Run clang-tidy on changed files (bounded)
        run: |
          BASE_REF="${{ github.base_ref || 'main' }}"
          git fetch origin "${BASE_REF}" --depth=1 || true
          CHANGED=$(git diff --name-only "origin/${BASE_REF}..." | grep -E '\.(cc|cpp|cxx|cu|cuh|hpp|hh|h)$' || true)
          if [ -z "$CHANGED" ]; then
            echo "No C/C++/CUDA headers/sources changed."
            exit 0
          fi
          echo "Running bounded clang-tidy on changed files..."
          set -e
          for f in $CHANGED; do
            echo "Analyzing $f"
            # This requires a compile_commands.json file for accurate header lookups.
            # For now, this is a best-effort check.
            clang-tidy-14 "$f" -- -std=c++17 -I src/helios_embed -I $(python -c 'import torch; print(torch.utils.cpp_extension.include_paths()[0])') -I $(python -c 'import pybind11; print(pybind11.get_include())') || true
          done
# --- END OF FILE .github/workflows/pull_request.yml (FINAL v2.3 - Shell Quoting Fixed) ---